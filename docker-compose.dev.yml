services:
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: theridian
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 30s
      retries: 3

  web:
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      # - .:/code
      - ./apps:/code/apps
      - ./core:/code/core
      - ./manage.py:/code/manage.py
      - ./workspace.yml:/code/workspace.yml
      - ./static:/code/static
      - ./staticfiles:/code/staticfiles
      - ./templates:/code/templates
      - ./media:/code/media
    ports:
      - "8000:8000"
    environment:
      - DEBUG=True
      - DATABASE_URL=postgres://postgres:postgres@db:5432/theridian
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672//
      - DJANGO_SETTINGS_MODULE=core.settings.development
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  celery:
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: celery -A core worker -l info
    volumes:
      # - .:/code
      - ./apps:/code/apps
      - ./core:/code/core
      - ./manage.py:/code/manage.py
      - ./workspace.yml:/code/workspace.yml
      - ./static:/code/static
      - ./staticfiles:/code/staticfiles
      - ./templates:/code/templates
      - ./media:/code/media
    environment:
      - DEBUG=True
      - DATABASE_URL=postgres://postgres:postgres@db:5432/theridian
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672//
      - DJANGO_SETTINGS_MODULE=core.settings.development
    depends_on:
      - db
      - redis
      - rabbitmq

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: celery -A core beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      # - .:/code
      - ./apps:/code/apps
      - ./core:/code/core
      - ./manage.py:/code/manage.py
      - ./workspace.yml:/code/workspace.yml
      - ./static:/code/static
      - ./staticfiles:/code/staticfiles
      - ./templates:/code/templates
      - ./media:/code/media
    environment:
      - DEBUG=True
      - DATABASE_URL=postgres://postgres:postgres@db:5432/theridian
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672//
      - DJANGO_SETTINGS_MODULE=core.settings.development
    depends_on:
      - db
      - redis
      - rabbitmq

  dagster:
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: python -m dagster dev -h 0.0.0.0 -p 3000 -w /code/workspace.yml
    ports:
      - "3000:3000"
    volumes:
      # - .:/code
      - ./apps:/code/apps
      - ./core:/code/core
      - ./manage.py:/code/manage.py
      - ./workspace.yml:/code/workspace.yml
      - ./static:/code/static
      - ./staticfiles:/code/staticfiles
      - ./templates:/code/templates
      - ./media:/code/media
    environment:
      - DEBUG=True
      - DATABASE_URL=postgres://postgres:postgres@db:5432/theridian
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672//
      - DJANGO_SETTINGS_MODULE=core.settings.development
    depends_on:
      - db
      - redis

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - web

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus

volumes:
  postgres_data:
  prometheus_data:
  grafana_data: